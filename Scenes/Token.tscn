[gd_scene load_steps=6 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform float white_progress : hint_range(0,1) = 0;

vec3 interpolate_vec3(vec3 start, vec3 end, float delta){
    return start + (end - start) * delta;
}

void fragment(){
    vec4 origin = texture(TEXTURE, UV);
    COLOR.rgb = interpolate_vec3(origin.rgb, vec3(1,1,1), white_progress);
    COLOR.a = origin.a;
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/white_progress = 0.0

[sub_resource type="StreamTexture" id=3]
flags = 4
load_path = "res://.import/rainbow tokens.png-87a1c5fbf56acb578e5925f53fe907d3.stex"

[sub_resource type="GDScript" id=4]
script/source = "extends Sprite

onready var rising_tween = $RisingTween
onready var falling_tween = $FallingTween
#var drop_point = Vector2()
var landing_point = Vector2()

func set_colour(colour):
	frame = colour

func get_colour():
	return frame

func get_colour_value():
	match (frame):
		0:
			return Color(\"#ff0000\")
		1:
			return Color(\"ff6a00\")
		2:
			return Color(\"d9be36\")
		3:
			return Color(\"6dd936\")
		4:
			return Color(\"36d9be\")
		5:
			return Color(\"0055ff\")
		6:
			return Color(\"a040ff\")
		7:
			return Color(\"ff40ff\")
	return null;

func follow_mouse():
	set_process(true)

func _process(delta):
	var easing = 5
	position += (get_global_mouse_position() - position) / easing

func drop(drop_pos, landing_pos):
	set_process(false)
	#drop_point = drop_pos
	landing_point = landing_pos
	# tween to top, then fall:
	# tween to top:
	var pos_difference = drop_pos - position
	var duration = pos_difference.length() / 1280
	rising_tween.interpolate_property(self, \"position\", position, 
		position + pos_difference, duration, 
		Tween.TRANS_LINEAR, Tween.EASE_OUT)
	rising_tween.start()

func _on_RisingTween_tween_completed(object, key):
	var pos_difference = landing_point - position
	var duration = pos_difference.length() / 640
	falling_tween.interpolate_property(self, \"position\", position, 
		position + pos_difference, duration, 
		Tween.TRANS_BOUNCE, Tween.EASE_OUT)
	falling_tween.start()

func _on_FallingTween_tween_completed(object, key):
	pass # Replace with function body.

func highlight():
	set_material(get_material().duplicate())
	$AnimationPlayer.play(\"Highlight\")
"

[sub_resource type="Animation" id=5]
length = 2.0
loop = true
step = 0.5
tracks/0/type = "value"
tracks/0/path = NodePath(".:material:shader_param/white_progress")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1, 2 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ 0.0, 1.0, 0.0 ]
}

[node name="Token" type="Sprite"]
material = SubResource( 2 )
texture = SubResource( 3 )
hframes = 8
script = SubResource( 4 )

[node name="RisingTween" type="Tween" parent="."]

[node name="FallingTween" type="Tween" parent="."]

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
anims/Highlight = SubResource( 5 )

[connection signal="tween_completed" from="RisingTween" to="." method="_on_RisingTween_tween_completed"]
[connection signal="tween_completed" from="FallingTween" to="." method="_on_FallingTween_tween_completed"]
